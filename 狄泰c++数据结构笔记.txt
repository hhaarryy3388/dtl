第2课 数据的艺术
	1>逻辑结构
		1>集合结构
		2>线性结构
		3>树形结构
		4>图形结构
	2>物理结构
		1>顺序结构
		2>链接结构

第3课 初识程序的灵魂--算法
	算法是,特定问题的,求解步骤的描述
	在计算机中表现为,指令的,有限序列
	1>算法的特性
		1>>输入
		2>>输出
		3>>有穷性 :算法在有限的步骤或时间之后,会自动结束,而不会无限循环
		4>>确定性 :算法的每一步都有确定的含义,不会出现二义性
		5>>可行性 :算法的每一步都是可行的
		6>>正确性
			1>>对于合法数据能够得到满足要求的结果
			2>>能够处理非法输入,并得到合理的结果
			3>>对于边界数据和压力数据都能得到满足要求的结果
		7>>可读性,健壮性,性价比...

第4课 算法好坏的评判标准
	1>性价比,效率
		1>事后统计算法效率
		2>事前计算算法效率
			1>算法采用的策略和方法
			2>问题输入规模
			3>编译器所产生的代买
			4>计算机执行速度

第5课 算法的时间复杂度

第6课 算法的效率的度量
	时间复杂度O(x)
	1 < logn < n < n*logn < n^2		可接受
				< n^3			不可接受的临界点
			< 2^n < n! < n^n 	不可接受

	空间复杂度S(x)

/* 异常类
 * 类型可以是自定义
 * 对类类型异常的匹配依旧是自上而下严格匹配
 * 赋值兼容性原则,在异常匹配中依然使用,(子类可以当做父类来匹配)
 * 所以catch匹配之类的一定要放到父类之上
 * 计算异常,空指针异常,越界异常,内存不足异常,参数错误异常
 */

第12课 顶层父类的创建
	1>尽量使用单重继承的方式进行系统设计
	2>尽量保持系统中只存在单一的继承树
	3>尽量使用组合关系代替继承关系

第13课 类族结构的进化
	DTLib的开发方式和注意事项
		迭代开发
			目标为可复用类库
		单一继承树
			所有类都继承自Object,规范堆对象创建时的行为
		只抛异常,不处理异常
			使用THROW_EXCEPTION抛出异常,提高可移植性
		弱耦合性
			尽量不实用标准库中的类和函数,提高可移植性

第18课
	对于容器类型的类,可以考虑禁用拷贝构造和赋值操作(不允许=赋值)
	因为一个装了水的杯子,复制出来,装的肯定是另一个杯子的水,没办法完全一样
	避免两个杯子的指针指向同一个杯子的水

	线性表要想插入元素,才能用数组操作符进行访问
	本质不同,不了替代数组使用

第19课
	创建数组类替代原生数组的意义
		数组类包含长度信息
		数组类能够主动发现越界访问

	Array设计要点
		